version: "3.9"

services:
  # PostgreSQL Database
  db:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: autoassist
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d autoassist"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - autoassist-network

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass autoassist123
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - autoassist-network

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - autoassist-network

  # MinIO Client for bucket setup
  minio-setup:
    image: minio/mc:latest
    depends_on:
      - minio
    environment:
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin123;
      /usr/bin/mc mb myminio/attachments;
      /usr/bin/mc policy set public myminio/attachments;
      exit 0;
      "
    networks:
      - autoassist-network

  # API Service
  api:
    build:
      context: ../../apps/api
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - API_PORT=8080
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/autoassist
      - REDIS_URL=redis://:autoassist123@redis:6379
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
      - MINIO_BUCKET=attachments
      - JWT_SECRET=your_super_secret_jwt_key_here
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ../../apps/api:/usr/src/app
      - /usr/src/app/node_modules
    command: ["pnpm", "dev"]
    networks:
      - autoassist-network

  # Web Frontend
  web:
    build:
      context: ../../apps/web
      dockerfile: Dockerfile
      target: "development"  # Development stage
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:8080
      - VITE_WS_URL=ws://localhost:8080
      - VITE_WEBAPP_TITLE=AutoAssist+ Development
    ports:
      - "5173:5173"
    depends_on:
      - api
    volumes:
      - ../../apps/web:/usr/src/app
      - /usr/src/app/node_modules
    command: ["pnpm", "dev", "--host"]
    networks:
      - autoassist-network

  # Telegram Bot
  bot:
    build:
      context: ../../apps/bot
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - API_URL=http://api:8080
      - BOT_WEBAPP_URL=http://localhost:5173/tg
    depends_on:
      - api
    volumes:
      - ../../apps/bot:/usr/src/app
      - /usr/src/app/node_modules
    command: ["pnpm", "dev"]
    networks:
      - autoassist-network

  # Nginx Reverse Proxy (Optional for production-like setup)
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
      - web
    networks:
      - autoassist-network

  # Monitoring: Prometheus
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - autoassist-network

  # Monitoring: Grafana
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - autoassist-network

  # Log Management: Loki
  loki:
    image: grafana/loki:latest
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
    networks:
      - autoassist-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

networks:
  autoassist-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16