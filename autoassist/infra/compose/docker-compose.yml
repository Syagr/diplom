version: "3.9"

networks:
  autoassist-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
  redis_data:
  minio_data:
  prometheus_data:
  loki_data:

services:
  db:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: autoassist
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    # No host port mapping (accessible within docker network only)
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # If you need custom init SQL, provide ./init.sql
      # - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test -d autoassist"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - autoassist-network

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes
    # Если нужен пароль, верни: --requirepass autoassist123
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - autoassist-network

  minio:
    image: minio/minio:latest
    restart: unless-stopped
    command: server /data --console-address ":12001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "12002:9000"   # S3 API
      - "12003:12001"  # Web Console
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://127.0.0.1:9000/minio/health/ready || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    networks:
      - autoassist-network

  minio-setup:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    environment:
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin123 &&
      /usr/bin/mc mb -p myminio/attachments ||
      true &&
      /usr/bin/mc anonymous set download myminio/attachments ||
      true &&
      exit 0
      "
    networks:
      - autoassist-network

  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    ports:
      - "19091:9090"   # UI на http://localhost:19091
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - autoassist-network

  loki:
    image: grafana/loki:latest
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
    networks:
      - autoassist-network

  api:
    build:
      context: ../../apps/api
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      # App
      NODE_ENV: production
      PORT: 8080
      JWT_SECRET: change_me_super_secret_key
      JWT_REFRESH_SECRET: change_me_super_refresh_secret
      # Database (inside network)
      DATABASE_URL: postgresql://test:test@db:5432/autoassist?schema=public
      # Redis
      REDIS_URL: redis://redis:6379
      # MinIO
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
      MINIO_BUCKET: attachments
      # CORS / Public URLs
      CORS_ORIGIN: http://localhost:5173,http://localhost
      # Web3 (optional; can be set in .env)
      WEB3_PROVIDER_URL: ${WEB3_PROVIDER_URL:-}
      USDC_TOKEN_ADDRESS: ${USDC_TOKEN_ADDRESS:-}
      PLATFORM_RECEIVE_ADDRESS: ${PLATFORM_RECEIVE_ADDRESS:-}
      WEB3_ENFORCE_AMOUNT: ${WEB3_ENFORCE_AMOUNT:-false}
      USDC_DECIMALS: ${USDC_DECIMALS:-6}
      EXPECTED_SIWE_DOMAIN: ${EXPECTED_SIWE_DOMAIN:-localhost}
      EXPECTED_SIWE_URI_PREFIX: ${EXPECTED_SIWE_URI_PREFIX:-http://localhost}
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:8080/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - autoassist-network

  prisma-migrate:
    image: node:18-bullseye
    working_dir: /work/apps/api
    volumes:
      - ../../:/work
    environment:
      DATABASE_URL: postgresql://test:test@db:5432/autoassist?schema=public
      CI: "true"
    depends_on:
      db:
        condition: service_healthy
    entrypoint: ["/bin/sh","-lc"]
    command: |
      corepack enable && corepack prepare pnpm@10.19.0 --activate && \
      pnpm -w install --no-frozen-lockfile && \
      pnpm --filter @autoassist/api prisma migrate dev --name autoassist && \
      pnpm --filter @autoassist/api prisma generate && \
      pnpm --filter @autoassist/api tsx prisma/seed.ts || true
    networks:
      - autoassist-network

  web:
    build:
      context: ../../
      dockerfile: apps/web/Dockerfile
    restart: unless-stopped
    ports:
      - "5173:80"   # serve SPA on http://localhost:5173
    depends_on:
      api:
        condition: service_healthy
    networks:
      - autoassist-network
